{ config, lib, pkgs, ... }:

let
  cfg = config.nixosConfig.shell.nvim;
  renderMarkdownPlugin = pkgs.vimUtils.buildVimPlugin {
    name = "render-markdown-nvim";
    version = "7.5.0"; # Adjust to the correct version
    src = pkgs.fetchFromGitHub {
      owner = "MeanderingProgrammer"; # Adjust to the correct author
      repo = "render-markdown.nvim"; # Adjust to the correct repository
      # rev = "ffbe9f2395eacdce8a9fa967ac0fae75a6204f09"; # Replace with the correct commit hash
      rev = "refs/tags/v7.5.0"; # Replace with the correct commit hash
      sha256 = "sha256-AGQV6X5TgpeyeAiYw6ybrdoGiIiNrGN+DbU0NttGi6w="; # Replace with the correct sha256 hash
    };
  };

  codeCompanionPlugin = pkgs.vimUtils.buildVimPlugin {
    pname = "codecompanion";
    version = "v2.2.0";
    src = pkgs.fetchFromGitHub {
      owner = "olimorris";
      repo = "codecompanion.nvim";
      rev = "refs/tags/v9.5.0";
      hash = "sha256-r+PKDMJQZZ40MXg0XlWCLwPTWUUa1YrdNrOm9rYGa0Q=";
    };
  };
in
{
  options.nixosConfig.shell.nvim = {
    enable = lib.mkEnableOption "Neovim";
    isDefaultEditor = lib.mkEnableOption "Sets EDITOR env variable to vim";
  };

  config = lib.mkIf cfg.enable {
    home.sessionVariables = lib.mkIf cfg.isDefaultEditor {
      EDITOR = "vim";
    };

    programs.neovim = {
      enable = true;
      package = pkgs.neovim-unwrapped;
      viAlias = true;
      vimAlias = true;
      vimdiffAlias = true;

      plugins = with pkgs.vimPlugins; [
        # Themes
        catppuccin-nvim
        nightfly
        material-nvim
        # everblush
        # arctic

        #Lsp
        lazy-lsp-nvim
        lsp-zero-nvim
        lsp_signature-nvim
        lspkind-nvim # vscode symbols code completion

        #IDE features
        # lspsaga-nvim
        trouble-nvim
        # nvim-autopairs
        which-key-nvim
        lualine-nvim
        # vim-mundo # undotree
        vim-illuminate

        oil-nvim
        mini-files
        nvim-web-devicons

        telescope-nvim
        telescope-fzf-native-nvim
        # smart-open-nvim

        # Code completion
        nvim-cmp
        cmp-nvim-lsp
        cmp-path
        cmp-buffer
        cmp_luasnip

        luasnip

        # Tree sitter
        nvim-treesitter.withAllGrammars
        nvim-treesitter-context
        indent-blankline-nvim
        nvim-treesitter-textobjects
        nvim-surround
        # ssr-nvim
        # treesj #split join blocks
        # syntax-tree-surfer

        # AI
        copilot-lua
        codeCompanionPlugin
        # avante-nvim
        render-markdown-nvim
        # img-clip-nvim
        # renderMarkdownPlugin # avante dep

        # Git
        gitsigns-nvim
        # vim-fugitive
        # vim-rhubarb
        diffview-nvim
        neogit

        # others
        plenary-nvim # all the lua functions I don't want to write twice
        # vim-tmux-navigator # ctrl between pane

        # Testing out
        focus-nvim
        nvim-ts-autotag
        # nvim-ufo
        telescope-undo-nvim
        twilight-nvim
        mini-pairs

        # Maybe try these
        # codecompanion
        # blink nvim
        # nvim-ts-context-commentstring
        # neorg
      ];

      extraPackages = with pkgs; [
        tree-sitter

        # Lua
        lua-language-server

        # Nix
        nixpkgs-fmt
        statix

        # Telescope
        ripgrep
        fd
        # sqlite # smart open dependency
      ];

      # :luafile ~/.config/nvim/init.lua
      # :luafile ~/nixos/home/shell/neovim/config/init.lua
      extraConfig = ''
        :luafile ~/.config/nvim/init.lua
      '';
    };

    home.packages = [
      pkgs.wl-clipboard
      pkgs.cliphist
      pkgs.ripgrep
    ];

    # home.file.".config/nvim/init.lua".source = "/home/andreas/nixos/home/shell/neovim/config/init.lua";
    # xdg.configFile.nvim.source = config.lib.file.mkOutOfStoreSymlink "/home/andreas/nixos/home/shell/neovim/config/init.lua";
    xdg.configFile.nvim = {
      source = ./config;
      recursive = true;
    };
  };
}
